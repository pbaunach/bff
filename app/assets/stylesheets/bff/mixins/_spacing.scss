// Spacing

@mixin spacing($name, $value){
	.#{$css-prefix}p-top--#{$name}{padding-top:$value;}
	.#{$css-prefix}p-bottom--#{$name}{padding-bottom:$value;}
	.#{$css-prefix}p-left--#{$name}{padding-left:$value;}
	.#{$css-prefix}p-right--#{$name}{padding-right:$value;}
	.#{$css-prefix}p-horizontal--#{$name}{padding-left:$value;padding-right:$value;}
	.#{$css-prefix}p-vertical--#{$name}{padding-top:$value;padding-bottom:$value;}
	.#{$css-prefix}p-around--#{$name}{padding:$value;}
	.#{$css-prefix}m-top--#{$name}{margin-top:$value;}
	.#{$css-prefix}m-bottom--#{$name}{margin-bottom:$value;}
	.#{$css-prefix}m-left--#{$name}{margin-left:$value;}
	.#{$css-prefix}m-right--#{$name}{margin-right:$value;}
	.#{$css-prefix}m-horizontal--#{$name}{margin-left:$value;margin-right:$value;}
	.#{$css-prefix}m-vertical--#{$name}{margin-top:$value;margin-bottom:$value;}
	.#{$css-prefix}m-around--#{$name}{margin:$value;}
}


// Utilities

// Screen Only
@mixin media-query--screen {

  @media (only-screen) {
    @content;
  }
}



// TINY - 320px - 20rem
@mixin media-query--x-small-min {

  @media (min-width: pem($media-query--x-small)) {
    @content;
  }
}

@mixin media-query--x-small-max {

  @media (max-width: pem($media-query--x-small)) {
    @content;
  }
}



// SMALL - 480px - 30rem
@mixin media-query--small-min {

  @media (min-width: pem($media-query--small)) {
    @content;
  }
}

@mixin media-query--small-max {

  @media (max-width: pem($media-query--small)) {
    @content;
  }
}



// MEDIUM - 768px - 48rem
@mixin media-query--medium-min {

  @media (min-width: pem($media-query--medium)) {
    @content;
  }
}

@mixin media-query--medium-max {

  @media (max-width: pem($media-query--medium)) {
    @content;
  }
}



// LARGE - 1024px - 64rem
@mixin media-query--large-min {

  @media (min-width: pem($media-query--large)) {
    @content;
  }
}

@mixin media-query--large-max {

  @media (max-width: pem($media-query--large)) {
    @content;
  }
}



//HUGE - 1224px - 76.5rem
@mixin media-query--huge-min {

  @media (min-width: pem(1224)) {
    @content;
  }
}

@mixin media-query--huge-max {

  @media (max-width: pem(1224)) {
    @content;
  }
}



// SUPER - 1824px - 114rem
@mixin media-query--super-min {

  @media (min-width: pem(1824)) {
    @content;
  }
}

@mixin media-query--super-max {

  @media (max-width: pem(1824)) {
    @content;
  }
}



// RETINA
@mixin retina {

  @media only screen and (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @content;
  }
}



// WEBKIT
@mixin webkit {

  @media screen and (-webkit-min-device-pixel-ratio: 0) {
    @content;
  }
}



// Sizing Helper
@mixin width($columns, $breakpoint: null, $max: false) {
  $breakpoint-string: null;

  // Loop through the number of columns for each denominator of our fractions.
  @each $denominator in $columns {

    @if ($breakpoint != null) {
      $breakpoint-string: if($max, 'max-', '') + $breakpoint + '-';
    }

    // If weâ€™re trying to make wholes, just spit a 100% width utility out one time only.
    @if ($denominator == 1) {

      .#{$css-prefix}#{$breakpoint-string}size--1-of-#{$demominator} {
        width: 100%;
      }
    }

    @else {

      // Begin creating a numberator for our fraction up until we hit the denominator.
      @for $numerator from 1 through $denominator {

        @for $i from 1 through $numerator {
          @if $numerator <= 8 or $numerator == 12 {
            .#{$css-prefix}#{$breakpoint-string}size--#{$i}-of-#{$numerator} {
              width: ($i / $numerator) * 100%;
            }
          }
        }
      }
    }
  }
}



// Order Helper
@mixin order($regions, $breakpoint: null) {

  @each $denominator in $regions {

    @for $numerator from 1 to $denominator {

      // Build a class in the format `.#{$css-prefix}order--1`.
      .#{$css-prefix}#{$breakpoint}order--#{$numerator} {
        order: $numerator;
      }
    }
  }
}



// Sizing Helper
@mixin flex-size($span: 1, $spread: 12) {

  @if type-of($span) == number and unitless($span) == false {
    flex: 0 0 rem($span);
    max-width: rem($span);
  }

  @else {
    $pct: percentage($span / $spread);
    flex: 0 0 $pct;
    max-width: $pct;
  }
}



// Wrapping Helper
@mixin flex-wrap($wrap: true) {

  @if $wrap {
    flex-wrap: wrap;
    align-items: flex-start;
  }

  @else {
    flex-wrap: nowrap;
    align-items: stretch;
  }
}



// Children - Flexbox Item
@mixin flex-item($size: expand) {

  @if (type-of($size) == 'number') {
    @include flex-size($size, $columns);
  }

  @if ($size == shrink) {
    flex: 0 0 auto;
    overflow: visible;
  }

  @else if ($size == expand) {
    flex: 1 1 auto;
  }
}




// Truncate
@mixin truncate {
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}



// Clearfix
@mixin clearfix {

  &:after {
    content: '';
    display: table;
    clear: both;
  }
}


@mixin square($size) {
  width: $size;
  height: $size;
}


@mixin visibility($class-name, $min: null, $max: null) {

  .#{$css-prefix}#{$class-name} {

    &-show {
      display: none;

      @if $min {
        @media (min-width: $min) {
          display: block;

          &--inline-block {
            display: inline-block;
          }
          &--inline {
            display: inline;
          }
        }
      }
    }

    @if $min and $max {

      &-show-only {
        display: none;

        @media (min-width: $min) and (max-width: $max - 1) {
          display: block;

          &--inline-block {
            display: inline-block;
          }
          &--inline {
            display: inline;
          }
        }
      }
    }
  }
  @if $max {

    .#{$css-prefix}max-#{$class-name}-hide {

      @media (max-width: $max - 1) {
        display: none;
      }
    }
  }
}

@mixin align-horizontal($children: null, $fallback: null, $mq: null) {
  display: flex;

  @if $mq != null {
    flex-direction: column;

    @include mq-medium-min {
      flex-direction: row;
    }
  }

  @if $children != null {
    > #{$children} {
      align-self: center;
    }
  }
}