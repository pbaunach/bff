//
// Table
//

.#{$css-prefix}table {
  background-color: $table-background--color;

  // Cells
  th,
  td {
    white-space: nowrap;
    position: relative;
  }
  td {
    padding: $spacing--medium $spacing--x-small;
  }

  // Table Heading Cells
  th {
    padding: $spacing--small $spacing--x-small;
    font-weight: $font-weight--light;
    background-color: $gray-lighter;
  }


// Add alternating strips to rows
&--striped {
  tbody tr:nth-of-type(even) > td,
  tbody tr:nth-of-type(even) > th {
    background-color: $table-row-background--hover;
  }
}

  // Default Table Row Hover
  &:not(.#{$css-prefix}no-row-hover) tbody tr:hover {
    > td,
    > th {
      background-color: $table-row-background--hover;
    }
  }

  // Selected Table Row
  tbody tr.#{$css-prefix}is-selected,
  &:not(.#{$css-prefix}no-row-hover) tr.#{$css-prefix}is-selected:hover {

    > td,
    > th {
      background-color: $table-row-background--active;
      color:$white;
      a{
        color:$white;
      }
    }
  }

  // Selected Cell
  td.#{$css-prefix}is-selected,
  td.#{$css-prefix}is-selected:hover,
  th.#{$css-prefix}is-selected,
  th.#{$css-prefix}is-selected:hover {
    box-shadow: $table-cell-border--selection 0 0 0 $table-border--width inset;
  }

  // Deal with truncation
  .#{$css-prefix}truncate {
    //max-width: $table-cell--max-width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  // By default, nowrap is applied
  .#{$css-prefix}cell-wrap {
    white-space: normal;
  }

  // Reduce cell to the width of its content, if space is available
  .#{$css-prefix}cell-shrink {
    width: 1%;
  }

  // Use to add a left padding buffer to cells, @todo will need to reset for responsive
  .#{$css-prefix}cell-buffer--left {
    padding-left: $spacing--large;
  }

  .#{$css-prefix}cell-buffer--right {
    padding-right: $spacing--large;
  }
}

// Add left and right padding to the first and last cells of a table
.#{$css-prefix}table--cell-buffer {

  tr > th:first-child,
  tr > td:first-child {
    padding-left: $spacing--large;
  }

  tr > th:last-child,
  tr > td:last-child {
    padding-right: $spacing--large;
  }
}

// Add vertical borders to a table
.#{$css-prefix}table--bordered {
  border: {
    top: $table-border--width solid $table-border--color;
    bottom: $table-border--width solid $table-border--color;
  }

  // More than one row in thead
  thead > tr + tr > th {
    border-top: $table-border--width solid $table-border--color;
  }

  // Cells
  td,
  th {
    border-top: $table-border--width solid $table-border--color;
  }

  // Default Table Row Hover
  //
  // Checks if .no-row-hover is applied to parent table
  // Applies hovers to only <th> and <td> within <tbody>
  // Also checks that the <th> and <td> do not have the class .is-selected
  // This retains the selected state when a row is hovered
  //
  // Box shadow used to eliminate jumpiness on hover
  &:not(.#{$css-prefix}no-row-hover) tbody tr:hover > td:not(.#{$css-prefix}is-selected),
  &:not(.#{$css-prefix}no-row-hover) tbody tr:hover > th:not(.#{$css-prefix}is-selected) {
    box-shadow: $table-border--color 0 ($table-border--width * -1) 0 inset,
                $table-border--color 0 ($table-border--width) 0 inset;
  }
}


// Applies move cursor to moveable cell
th.#{$css-prefix}is-sortable {
  cursor: pointer;
  padding: 0; // Reset padding so actionable link bleeds to edge
}

// Actionable area inside th
.#{$css-prefix}th__action {
  display: flex;
  padding: $spacing--x-small;

  &:focus,
  &:hover {
    outline: 0;
    background-color: $table-row-background--hover;

    .#{$css-prefix}is-sortable__icon {
      display: inline-block;
    }
  }
}

// Icon inside sortable th
.#{$css-prefix}is-sortable__icon {
  @include square($square-icon--small-content);
  margin-left: $spacing--xx-small;
  display: none;
}

// Active state of sorted column
.#{$css-prefix}is-sorted {

  .#{$css-prefix}is-sortable__icon {
    display: inline-block;
  }

  // Change direction of arrow
  &--asc .#{$css-prefix}is-sortable__icon {
    transform: rotate(180deg);
  }
}

// Provide an indicator that resizing is available
.#{$css-prefix}is-resizable {

  .#{$css-prefix}th__action:hover,
  .#{$css-prefix}th__action:focus {
    box-shadow: $table-border--color ($spacing--xx-small * -1) 0 0 inset;
  }
}

// Resizable handle
.#{$css-prefix}resizable {
  max-width: 100%;

  &__handle {
    position: absolute;
    right: 0;
    top: 0;
    width: $spacing--xx-small;
    height: 100%;
    background: $brand--color;
    display: block;
    cursor: col-resize;
    opacity: 0;
    z-index: 5000;

    &:hover,
    &:focus,
    &:active {
      opacity: 1;
    }
  }

  &__divider {
    position: absolute;
    left: 50%;
    height: 100vh;
    width: 1px;
    background: $brand--color;
  }

  &__input:focus ~ .#{$css-prefix}resizable__handle {
    opacity: 1;
  }
}

// Resizable data table columns
//
// Set table to use fixed layout for width and truncation purposes
.#{$css-prefix}table--fixed-layout {
  table-layout: fixed;
  width: 100%;
  white-space: nowrap;

  .#{$css-prefix}cell-shrink {
    width: $square-icon--large-boundary;

    &:nth-child(n) {
      padding: {
        left: 0;
        right: 0;
      }
    }

    &:first-child {
      text-align: right;
      padding-right: $spacing--x-small;
    }

    &:last-child {
      text-align: left;
      padding-left: $spacing--x-small;
    }
  }
}

.#{$css-prefix}table--compact {

  th,
  td {
    padding: $spacing--xx-small $spacing--x-small;
  }
}